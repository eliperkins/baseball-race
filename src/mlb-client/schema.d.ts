/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/divisions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves Divisions
         * @description Returns Divisions
         *
         */
        get: operations["getDivisions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/game/{gamePk}/boxscore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves boxscore
         * @description Returns Boxscore
         *
         */
        get: operations["getBoxscore"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/game/{gamePk}/linescore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves linescore
         * @description Returns Linescore
         *
         */
        get: operations["getLinescore"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/leagues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves Leagues
         * @description Returns Leagues
         *
         */
        get: operations["getLeagues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves schedule
         * @description Returns Schedule
         *
         */
        get: operations["getSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves season
         * @description Returns Season
         *
         */
        get: operations["getSeason"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/seasons/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves All Seasons over time
         * @description Returns All Seasons
         *
         */
        get: operations["getAllSeasons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves Teams
         * @description Returns Teams
         *
         */
        get: operations["getTeams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/standings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves Standings
         * @description Returns Standing
         *
         */
        get: operations["getStandings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * League
         * @description League
         *
         */
        league: {
            id: number;
            name: string;
            link?: string;
            abbreviation?: string;
            nameShort?: string;
            seasonState?: string;
            hasWildCard?: boolean;
            hasSplitSeason?: boolean;
            hasPlayoffPoints?: boolean;
            /** LeagueDates */
            seasonDateInfo?: {
                seasonId?: string;
                preSeasonStartDate?: string;
                preSeasonEndDate?: string;
                seasonStartDate?: string;
                springStartDate?: string;
                springEndDate?: string;
                offseasonStartDate?: string;
                offseasonEndDate?: string;
                seasonLevelGamedayType?: string;
                gameLevelGamedayType?: string;
            };
            season?: string;
            orgCode?: string;
            conferencesInUse?: boolean;
            divisionsInUse?: boolean;
            sortOrder?: number;
            active?: boolean;
        };
        /**
         * Sport
         * @description Sport
         *
         */
        sport: {
            id: number;
            code?: string;
            link?: string;
            name?: string;
            abbreviation?: string;
            sortOrder?: number;
            activeStatus?: boolean;
        };
        /**
         * Division
         * @description Division
         *
         */
        division: {
            id: number;
            name: string;
            season?: string;
            nameShort?: string;
            link?: string;
            abbreviation?: string;
            league?: components["schemas"]["league"];
            sport?: components["schemas"]["sport"];
            hasWildcard?: boolean;
            sortOrder?: number;
            numPlayoffTeams?: number;
            active?: boolean;
        };
        /**
         * Venue
         * @description Venue
         *
         */
        venue: {
            id: number;
            name: string;
            link?: string;
            active?: boolean;
            season?: string;
        };
        /**
         * Team
         * @description Team
         *
         */
        team: {
            id: number;
            name: string;
            link?: string;
            allStarStatus?: string;
            season?: number;
            venue?: components["schemas"]["venue"];
            springVenue?: components["schemas"]["venue"];
            teamCode?: string;
            fileCode?: string;
            abbreviation?: string;
            teamName?: string;
            locationName?: string;
            firstYearOfPlay?: string;
            league?: components["schemas"]["league"];
            springLeague?: components["schemas"]["league"];
            division?: components["schemas"]["division"];
            sport?: components["schemas"]["sport"];
            record?: components["schemas"]["record"];
            shortName?: string;
            franchiseName?: string;
            clubName?: string;
            active?: boolean;
        };
        /** LeagueRecord */
        leagueRecord: {
            wins: number;
            losses: number;
            ties?: number;
            pct: string;
        };
        /**
         * Record
         * @description Record
         *
         */
        record: {
            team: components["schemas"]["team"];
            season: string;
            /** Streak */
            streak: {
                /**
                 * @description Streak Type:
                 *       * Losing Streak
                 *       * Winning Streak
                 *
                 * @enum {string}
                 */
                streakType?: "losses" | "wins";
            };
            divisionRank: string;
            leagueRank: string;
            sportRank?: string;
            gamesPlayed?: number;
            gamesBack: string;
            wildCardGamesBack?: string;
            leagueGamesBack?: string;
            sportGamesBack?: string;
            divisionGamesBack?: string;
            conferenceGamesBack?: string;
            leagueRecord: components["schemas"]["leagueRecord"];
            lastUpdated?: string;
            runsAllowed?: number;
            runsScored?: number;
            divisionChamp?: boolean;
            divisionLeader?: boolean;
            hasWildcard?: boolean;
            clinched?: boolean;
            eliminationNumber?: string;
            eliminationNumberSport?: string;
            eliminationNumberLeague?: string;
            eliminationNumberDivision?: string;
            eliminationNumberConference?: string;
            wildCardEliminationNumber?: string;
            magicNumber?: string;
            wins: number;
            losses: number;
            runDifferential?: number;
            winningPercentage?: string;
        };
        /**
         * Batting Stats
         * @description Batting Stats
         *
         */
        battingStats: {
            flyOuts?: number;
            groundOuts?: number;
            airOuts?: number;
            runs?: number;
            doubles?: number;
            triples?: number;
            homeRuns?: number;
            strikeOuts?: number;
            baseOnBalls?: number;
            intentionalWalks?: number;
            hits?: number;
            hitByPitch?: number;
            avg?: string;
            atBats?: number;
            obp?: string;
            slg?: string;
            ops?: string;
            caughtStealing?: number;
            stolenBases?: number;
            stolenBasePercentage?: string;
            groundIntoDoublePlay?: number;
            groundIntoTriplePlay?: number;
            plateAppearances?: number;
            totalBases?: number;
            rbi?: number;
            leftOnBase?: number;
            sacBunts?: number;
            sacFlies?: number;
            catchersInterference?: number;
            pickoffs?: number;
            atBatsPerHomeRun?: string;
            popOuts?: number;
            lineOuts?: number;
        };
        /**
         * Pitching Stats
         * @description Pitching Stats
         *
         */
        pitchingStats: {
            flyOuts?: number;
            groundOuts?: number;
            airOuts?: number;
            runs?: number;
            doubles?: number;
            triples?: number;
            homeRuns?: number;
            strikeOuts?: number;
            baseOnBalls?: number;
            intentionalWalks?: number;
            hits?: number;
            hitByPitch?: number;
            atBats?: number;
            obp?: string;
            caughtStealing?: number;
            stolenBases?: number;
            stolenBasePercentage?: string;
            numberOfPitches?: number;
            era?: string;
            inningsPitched?: string;
            saveOpportunities?: number;
            earnedRuns?: number;
            whip?: string;
            battersFaced?: number;
            outs?: number;
            completeGames?: number;
            shutouts?: number;
            pitchesThrown?: number;
            balls?: number;
            strikes?: number;
            strikePercentage?: string;
            hitBatsmen?: number;
            balks?: number;
            wildPitches?: number;
            pickoffs?: number;
            groundOutsToAirouts?: string;
            rbi?: number;
            pitchesPerInning?: string;
            runsScoredPer9?: string;
            homeRunsPer9?: string;
            inheritedRunners?: number;
            inheritedRunnersScored?: number;
            catchersInterference?: number;
            sacBunts?: number;
            sacFlies?: number;
            passedBall?: number;
            popOuts?: number;
            lineOuts?: number;
        };
        /**
         * Fielding Stats
         * @description Fielding Stats
         *
         */
        fieldingStats: {
            caughtStealing?: number;
            stolenBases?: number;
            stolenBasePercentage?: string;
            assists?: number;
            putOuts?: number;
            errors?: number;
            chances?: number;
            passedBall?: number;
            pickoffs?: number;
        };
        /**
         * Player
         * @description Player
         *
         */
        player: {
            /** PlayerPerson */
            person: {
                id: string;
                fullName: string;
                link: string;
                boxscoreName: string;
            };
            jerseyNumber?: string;
            /** PlayerPosition */
            position: {
                code?: string;
                name?: string;
                type?: string;
                abbreviation?: string;
            };
            /** PlayerStatus */
            status?: {
                code?: string;
                description?: string;
            };
            parentTeamId?: number;
            battingOrder?: number;
            /** PlayerStats */
            stats: {
                batting: components["schemas"]["battingStats"];
                pitching: components["schemas"]["pitchingStats"];
                fielding: components["schemas"]["fieldingStats"];
            };
            /** PlayerSeasonStats */
            seasonStats: {
                batting: components["schemas"]["battingStats"];
                pitching: components["schemas"]["pitchingStats"];
                fielding: components["schemas"]["fieldingStats"];
            };
            /** PlayerGameStatus */
            gameStatus?: {
                isCurrentBatter?: boolean;
                isCurrentPitcher?: boolean;
                isOnBench?: boolean;
                isSubstitute?: boolean;
            };
            allPositions?: {
                code?: string;
                name?: string;
                type?: string;
                abbreviation?: string;
            }[];
            type?: string;
            gameScore?: number;
            hittingGameScore?: number;
        };
        /**
         * BoxscoreTeam
         * @description Boxscore Team
         *
         */
        boxscoreTeam: {
            team: components["schemas"]["team"];
            /** TeamStats */
            teamStats: {
                batting: components["schemas"]["battingStats"];
                pitching: components["schemas"]["pitchingStats"];
                fielding: components["schemas"]["fieldingStats"];
            };
            /** BoxscoreTeamBatters */
            batters: number[];
            /** BoxscoreTeamPitchers */
            pitchers: number[];
            /** BoxscoreTeamBullpen */
            bullpen: number[];
            /** BoxscoreTeamBench */
            bench: number[];
            /** BoxscoreTeamPlayers */
            players: {
                [key: string]: components["schemas"]["player"];
            };
        };
        /** Official */
        official: {
            id?: number;
            fullName?: string;
            link?: string;
        };
        /** GameOfficial */
        gameOfficial: {
            official?: components["schemas"]["official"];
            officialType?: string;
        };
        /**
         * Boxscore
         * @description Boxscore
         *
         */
        boxscore: {
            /** BoxscoreTeams */
            teams: {
                away: components["schemas"]["boxscoreTeam"];
                home: components["schemas"]["boxscoreTeam"];
            };
            officials: components["schemas"]["gameOfficial"][];
        };
        /**
         * LinescoreTeam
         * @description InningTeam
         *
         */
        linescoreTeam: {
            /** @default 0 */
            runs: number;
            /** @default 0 */
            hits: number;
            /** @default 0 */
            errors: number;
            /** @default 0 */
            leftOnBase: number;
        };
        /**
         * Inning
         * @description Inning
         *
         */
        inning: {
            /** @default 0 */
            num: number;
            /** @default  */
            ordinalNum: string;
            home: components["schemas"]["linescoreTeam"];
            away: components["schemas"]["linescoreTeam"];
        };
        /**
         * Linescore
         * @description Linescore
         *
         */
        linescore: {
            currentInning?: number;
            currentInningOrdinal?: string;
            inningState?: string;
            inningHalf?: string;
            isTopInning?: boolean;
            /** @default 9 */
            scheduledInnings: number;
            innings?: components["schemas"]["inning"][];
            /** LinescoreTeams */
            teams: {
                away: components["schemas"]["linescoreTeam"];
                home: components["schemas"]["linescoreTeam"];
            };
            /** @default 0 */
            balls: number;
            /** @default 0 */
            strikes: number;
            /** @default 0 */
            outs: number;
        };
        /**
         * @description Game Type:
         *       * `E` - Exhibition
         *       * `S` - Spring Training
         *       * `R` - Regular Season
         *       * `F` - Wild Card Series
         *       * `D` - Division Series
         *       * `L` - League Championship Series
         *       * `W` - World Series
         *
         * @enum {string}
         */
        gameType: "E" | "S" | "R" | "F" | "D" | "L" | "W";
        /**
         * @description Coded Game State
         *       * `F` - Final
         *       * `D` - Delayed/Postponed
         *       * `S` - Scheduled
         *       * `I` - In Progress
         *       * `P` - Pregame
         *       * `O` - Game Over
         *       * `C` - Canceled
         *
         * @enum {string}
         */
        gameStatusCode: "F" | "D" | "S" | "I" | "P" | "O" | "C";
        /**
         * GameTeam
         * @description Game Team
         *
         */
        gameTeam: {
            leagueRecord?: components["schemas"]["leagueRecord"];
            score: number;
            team: components["schemas"]["team"];
            isWinner: boolean;
            splitSquad?: boolean;
            seriesNumber?: number;
        };
        /**
         * Game
         * @description Game Thing
         *
         */
        game: {
            gamePk: number;
            gameGuid: string;
            link?: string;
            gameType: components["schemas"]["gameType"];
            season: number;
            gameDate: string;
            officialDate: string;
            rescheduledTo?: number;
            rescheduledToDate?: string;
            rescheduledFrom?: number;
            rescheduledFromDate?: string;
            /** GameStatus */
            status: {
                abstractGameState?: string;
                codedGameState?: components["schemas"]["gameStatusCode"];
                detailedState?: string;
                statusCode?: string;
                startTimeTBD?: boolean;
                abstractGameCode?: string;
            };
            /** GameTeams */
            teams: {
                away: components["schemas"]["gameTeam"];
                home: components["schemas"]["gameTeam"];
            };
            venue?: components["schemas"]["venue"];
            isTie?: boolean;
            gameNumber: number;
            publicFacing?: boolean;
            doubleHeader?: string;
            gamedayType?: string;
            tiebreaker?: string;
            calendarEventID?: string;
            seasonDisplay?: string;
            dayNight?: string;
            description?: string;
            scheduledInnings?: number;
            reverseHomeAwayStatus?: boolean;
            inningBreakLength?: number;
            gamesInSeries: number;
            seriesGameNumber: number;
            seriesDescription?: string;
            recordSource?: string;
            ifNecessary?: string;
            ifNecessaryDescription?: string;
        };
        /**
         * Schedule
         * @description Schedule
         *
         */
        schedule: {
            totalItems: number;
            totalEvents: number;
            totalGames: number;
            totalGamesInProgress: number;
            dates: {
                date?: string;
                totalItems?: number;
                totalEvents?: number;
                totalGames?: number;
                totalGamesInProgress?: number;
                games: components["schemas"]["game"][];
            }[];
        };
        /**
         * Season
         * @description Season
         *
         */
        season: {
            seasonId: string;
            hasWildcard?: boolean;
            preSeasonStartDate?: string;
            preSeasonEndDate?: string;
            seasonStartDate: string;
            seasonEndDate: string;
            springStartDate?: string;
            springEndDate?: string;
            regularSeasonStartDate: string;
            lastDate1stHalf?: string;
            allStartDate?: string;
            firstDate2ndHalf?: string;
            regularSeasonEndDate: string;
            postSeasonStartDate?: string;
            postSeasonEndDate?: string;
            offSeasonStartDate?: string;
            offSeasonEndDate?: string;
            seasonLevelGamedayType?: string;
            gameLevelGamedayType?: string;
            qualifierPlateAppearances?: number;
            qualifierOutsPitched?: number;
        };
        /** Seasons */
        seasons: {
            seasons: components["schemas"]["season"][];
        };
        /**
         * DivisionStandings
         * @description Standings
         *
         */
        divisionStandings: {
            standingsType?: string;
            league: components["schemas"]["league"];
            division: components["schemas"]["division"];
            sport: components["schemas"]["sport"];
            lastUpdated?: string;
            teamRecords: components["schemas"]["record"][];
        };
        BattingStats: components["schemas"]["battingStats"];
        Boxscore: components["schemas"]["boxscore"];
        BoxscoreTeam: components["schemas"]["boxscoreTeam"];
        Division: components["schemas"]["division"];
        DivisionStandings: components["schemas"]["divisionStandings"];
        FieldingStats: components["schemas"]["fieldingStats"];
        Game: components["schemas"]["game"];
        GameOfficial: components["schemas"]["gameOfficial"];
        GameTeam: components["schemas"]["gameTeam"];
        GameStatusCode: components["schemas"]["gameStatusCode"];
        GameType: components["schemas"]["gameType"];
        Inning: components["schemas"]["inning"];
        Linescore: components["schemas"]["linescore"];
        LinescoreTeam: components["schemas"]["linescoreTeam"];
        League: components["schemas"]["league"];
        LeagueRecord: components["schemas"]["leagueRecord"];
        Official: components["schemas"]["official"];
        PitchingStats: components["schemas"]["pitchingStats"];
        Player: components["schemas"]["player"];
        Record: components["schemas"]["record"];
        Seasons: components["schemas"]["seasons"];
        Season: components["schemas"]["season"];
        Schedule: components["schemas"]["schedule"];
        Sport: components["schemas"]["sport"];
        Team: components["schemas"]["team"];
        Venue: components["schemas"]["venue"];
    };
    responses: never;
    parameters: {
        sportId: number;
        season: string;
        /** @description The unique identifier of a game */
        gamePk: number;
        fields: string[];
        /** @description The unique identifier of a game */
        "gamePk-2": number;
        gameTypes: components["schemas"]["gameType"][];
        startDate: string;
        endDate: string;
        hydrate: string;
        leagueIds: number[];
        teams: number[];
        leagueId: number;
        date: string;
        teamId: number;
        PathGamePk: string;
        Date: string;
        EndDate: string;
        Fields: string;
        GameTypes: string;
        QueryGamePk: string;
        Hydrate: string;
        LeagueId: string;
        LeagueIds: string;
        Season: string;
        SportId: string;
        StartDate: string;
        TeamId: string;
        Teams: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getDivisions: {
        parameters: {
            query: {
                sportId: components["parameters"]["sportId"];
                season: components["parameters"]["season"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        divisions: components["schemas"]["division"][];
                    };
                };
            };
        };
    };
    getBoxscore: {
        parameters: {
            query?: {
                fields?: components["parameters"]["fields"];
            };
            header?: never;
            path: {
                /** @description The unique identifier of a game */
                gamePk: components["parameters"]["gamePk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["boxscore"];
                };
            };
        };
    };
    getLinescore: {
        parameters: {
            query?: {
                fields?: components["parameters"]["fields"];
            };
            header?: never;
            path: {
                /** @description The unique identifier of a game */
                gamePk: components["parameters"]["gamePk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["linescore"];
                };
            };
        };
    };
    getLeagues: {
        parameters: {
            query: {
                sportId: components["parameters"]["sportId"];
                season: components["parameters"]["season"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        leagues: components["schemas"]["league"][];
                    };
                };
            };
        };
    };
    getSchedule: {
        parameters: {
            query: {
                /** @description The unique identifier of a game */
                gamePk?: components["parameters"]["gamePk-2"];
                sportId: components["parameters"]["sportId"];
                gameTypes?: components["parameters"]["gameTypes"];
                startDate?: components["parameters"]["startDate"];
                endDate?: components["parameters"]["endDate"];
                fields?: components["parameters"]["fields"];
                hydrate?: components["parameters"]["hydrate"];
                leagueIds?: components["parameters"]["leagueIds"];
                teamId?: components["parameters"]["teams"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schedule"];
                };
            };
        };
    };
    getSeason: {
        parameters: {
            query: {
                sportId: components["parameters"]["sportId"];
                season: components["parameters"]["season"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["seasons"];
                };
            };
        };
    };
    getAllSeasons: {
        parameters: {
            query: {
                sportId: components["parameters"]["sportId"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["seasons"];
                };
            };
        };
    };
    getTeams: {
        parameters: {
            query: {
                sportId: components["parameters"]["sportId"];
                season: components["parameters"]["season"];
                leagueIds?: components["parameters"]["leagueIds"];
                fields?: components["parameters"]["fields"];
                hydrate?: components["parameters"]["hydrate"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        teams: components["schemas"]["team"][];
                    };
                };
            };
        };
    };
    getStandings: {
        parameters: {
            query: {
                leagueId: components["parameters"]["leagueId"];
                season: components["parameters"]["season"];
                date?: components["parameters"]["date"];
                fields?: components["parameters"]["fields"];
                hydrate?: components["parameters"]["hydrate"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        records: components["schemas"]["divisionStandings"][];
                    };
                };
            };
        };
    };
}
